
impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32 {
        let n = graph.len();
        let mut dsu = DSU::new(n);
        for i in 0..n {
            for j in 0..n {
                if graph[i][j] == 1 {
                    dsu.union(i, j);
                }
            }
        }
        
        let mut sizes = vec![0; n];
        for i in 0..n {
            sizes[dsu.find(i)] += 1;
        }
        
        let mut malware_count = vec![0; n];
        for &node in &initial {
            malware_count[dsu.find(node as usize)] += 1;
        }
        
        let mut result = (0, initial[0]);
        for &node in &initial {
            let root = dsu.find(node as usize);
            if malware_count[root] == 1 {
                if sizes[root] > result.0 {
                    result = (sizes[root], node);
                } else if sizes[root] == result.0 && node < result.1 {
                    result = (sizes[root], node);
                }
            }
        }
        
        if result.0 == 0 {
            *initial.iter().min().unwrap()
        } else {
            result.1

        }
    }
}

struct DSU {
    parent: Vec<usize>,
}

impl DSU {
    fn new(size: usize) -> DSU {
        let mut parent = Vec::new();
        for i in 0..size {
            parent.push(i);
        }
        DSU { parent }
    }
    
    fn find(&mut self, mut x: usize) -> usize {
        while self.parent[x] != x {
            x = self.parent[x];
        }
        x

    }
    
    fn union(&mut self, x: usize, y: usize) {
        let root_x = self.find(x);
        let root_y = self.find(y);
        if root_x != root_y {
            self.parent[root_x] = root_y;
        }
    }
}
