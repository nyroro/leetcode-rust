
impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32 {
        let n = graph.len();
        let mut infected = vec![false; n];
        let mut result = (n, 0);

        for &node in &initial {
            infected[node as usize] = true;
        }

        for &node in &initial {
            let count = Self::dfs(&graph, &mut infected.clone(), node);
            if count < result.0 || (count == result.0 && node < result.1) {
                result = (count, node);
            }
        }

        result.1

    }

    fn dfs(graph: &Vec<Vec<i32>>, infected: &mut Vec<bool>, node: i32) -> i32 {
        let mut count = 1;
        infected[node as usize] = false;

        for (i, &connected) in graph[node as usize].iter().enumerate() {
            if connected == 1 && infected[i] {
                count += Self::dfs(graph, infected, i as i32);
            }
        }

        count

    }
}
