
use std::collections::{HashSet, VecDeque};

impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32 {
        fn bfs(graph: &Vec<Vec<i32>>, initial: &HashSet<i32>, delval: i32) -> usize {
            let mut visited = HashSet::new();
            let mut queue = VecDeque::new();

            for &node in initial.iter() {
                if node != delval {
                    queue.push_back(node);
                }
            }

            while let Some(node) = queue.pop_front() {
                if node == delval || visited.contains(&node) {
                    continue;
                }
                visited.insert(node);
                for (i, &val) in graph[node as usize].iter().enumerate() {
                    if val == 1 {
                        queue.push_back(i as i32);
                    }
                }
            }

            visited.len()
        }

        let graph = &graph;
        let initial_set: HashSet<i32> = initial.iter().cloned().collect();
        let mut result_node = initial[0];
        let mut min_infected_count = bfs(graph, &initial_set, initial[0]);

        for &node in initial.iter() {
            let infected_count = bfs(graph, &initial_set, node);
            if infected_count < min_infected_count || (infected_count == min_infected_count && node < result_node) {
                result_node = node;
                min_infected_count = infected_count;
            }
        }

        result_node

    }
}
